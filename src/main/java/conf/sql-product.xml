<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
				  "dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">
	<resultMap id="productResult" type="product">
		<result property="productCode" column="PRODUCT_CODE" />
		<result property="productImage" column="PRODUCT_IMAGE" />
		<result property="productName" column="PRODUCT_NAME" />
		<result property="productUnitPrice" column="PRODUCT_UNIT_PRICE" />
		<result property="productCount" column="PRODUCT_COUNT" />
		<result property="productCategoryCd" column="PRODUCT_CATEGORY_CD" />
		<result property="productRegDate" column="PRODUCT_REG_DATE" />
	</resultMap>

	<select id="retrieveProductList" resultType="map" parameterType="map">
		<![CDATA[
			/*	retrieveProductList	*/
			SELECT PRODUCT.PRODUCT_CODE
			     , PRODUCT.PRODUCT_IMAGE
			     , PRODUCT.PRODUCT_NAME
			     , PRODUCT.PRODUCT_UNIT_PRICE
			     , PRODUCT.PRODUCT_COUNT
			     , PRODUCT_CATEGORY_CD
			     , (SELECT COMM_CD_NM FROM TB_COM_CODE WHERE 1=1 AND COMM_TY_CD = 'CODE0101' AND COMM_CD = PRODUCT.PRODUCT_CATEGORY_CD) AS PRODUCT_CATEGORY_CD_NM
			     , PRODUCT.PRODUCT_REG_DATE
			FROM   TB_PRODUCT PRODUCT
			WHERE 1=1
			]]>
			<if test="category != null">
				AND PRODUCT_CATEGORY_CD = #{category}
			</if>
			ORDER BY PRODUCT.PRODUCT_REG_DATE DESC
	</select>

	<select id="retrieveProductListForMain" resultType="map">
		<![CDATA[
			/*	retrieveProductListForMain	*/
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'O'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM = 1
			UNION ALL
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'P'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM = 1
						UNION ALL
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'B'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM = 1
						UNION ALL
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'D'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM = 1
						UNION ALL
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'S'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM = 1
			]]>
	</select>

	<select id="retrieveProductListForBinder" resultType="map">
		<![CDATA[
			/*	retrieveProductListForBinder	*/
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'B'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM <= 3
			]]>
	</select>

	<select id="retrieveProductListForDesign" resultType="map">
		<![CDATA[
			/*	retrieveProductListForDesign	*/
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'D'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM <= 4
			]]>
	</select>

	<select id="retrieveProductListForOffice" resultType="map">
		<![CDATA[
			/*	retrieveProductListForOffice	*/
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'O'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM <= 6
			]]>
	</select>

	<select id="retrieveProductListForPen" resultType="map">
		<![CDATA[
			/*	retrieveProductListForPen	*/
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'P'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM <= 8
			]]>
	</select>

	<select id="retrieveProductListForStorage" resultType="map">
		<![CDATA[
			/*	retrieveProductListForStorage	*/
			SELECT T.PRODUCT_IMAGE, T.PRODUCT_CATEGORY_CD
			FROM
			(
			  SELECT PRODUCT_IMAGE, PRODUCT_CATEGORY_CD
			  FROM TB_PRODUCT
			  WHERE 1=1
			  AND PRODUCT_CATEGORY_CD = 'S'
			  ORDER BY PRODUCT_REG_DATE DESC
			) T
			WHERE ROWNUM <= 6
			]]>
	</select>

	<select id="retrieveProduct" parameterType="map" resultType="map">
		/*	retrieveProduct	*/
		SELECT PRODUCT.PRODUCT_CODE
		     , PRODUCT.PRODUCT_IMAGE
		     , PRODUCT.PRODUCT_NAME
		     , PRODUCT.PRODUCT_UNIT_PRICE
		     , PRODUCT.PRODUCT_COUNT
		     , PRODUCT.PRODUCT_CATEGORY_CD
		     , (SELECT COMM_CD_NM FROM TB_COM_CODE WHERE 1=1 AND COMM_TY_CD = 'CODE0101' AND COMM_CD = PRODUCT.PRODUCT_CATEGORY_CD) AS PRODUCT_CATEGORY_CD_NM
		     , PRODUCT.PRODUCT_REG_DATE
		     , (CASE WHEN (SELECT MARK_RATING FROM TB_MARK WHERE 1=1 AND PRODUCT_CODE = #{productCode} AND USER_CODE = #{userCode}) IS NULL THEN 'N' ELSE 'Y' END) AS MARK_YN
		     , (SELECT SELL_YN FROM TB_SELL WHERE 1=1 AND PRODUCT_CODE = #{productCode} AND USER_CODE = #{userCode} AND SELL_YN = 'Y' AND ROWNUM = 1) AS SELL_YN
		     , (SELECT ROUND( (SUM(MARK_RATING) / COUNT(*)), 1) FROM TB_MARK WHERE 1=1 AND PRODUCT_CODE = #{productCode}) AS MARK_RATING

		FROM   TB_PRODUCT PRODUCT
		WHERE 1=1
		AND  PRODUCT_CODE = #{productCode}
	</select>

	<update id="updateProduct" parameterType="map">
		/*	updateProduct	*/
		UPDATE TB_PRODUCT
		SET PRODUCT_IMAGE       = #{productImage}
		  , PRODUCT_NAME        = #{productName}
		  , PRODUCT_UNIT_PRICE  = #{productUnitPrice}
		  , PRODUCT_COUNT       = #{productCount}
		WHERE 1=1
		AND  PRODUCT_CODE = #{productCode}
	</update>

	<update id="updateProductCountMinus" parameterType="map">
		/*	updateProductCountMinus	*/
		UPDATE TB_PRODUCT
		SET PRODUCT_COUNT       = PRODUCT_COUNT - #{productCount}
		WHERE 1=1
		AND  PRODUCT_CODE = #{productCode}
	</update>

	<update id="updateProductCountPlus" parameterType="map">
		/*	updateProductCountPlus	*/
		UPDATE TB_PRODUCT
		SET PRODUCT_COUNT       = PRODUCT_COUNT + #{productCount}
		WHERE 1=1
		AND  PRODUCT_CODE = #{productCode}
	</update>

	<insert id="createProduct" parameterType="product">
		<![CDATA[
		/*	createProduct	*/
		INSERT INTO TB_PRODUCT(
			  PRODUCT_CODE
			, PRODUCT_IMAGE
			, PRODUCT_NAME
			, PRODUCT_UNIT_PRICE
			, PRODUCT_COUNT
			, PRODUCT_CATEGORY_CD
			, PRODUCT_REG_DATE
		) VALUES (
			  'P' || LPAD(PRODUCT_SEQ.NEXTVAL, 4, 0)
			, #{productImage}
			, #{productName}
			, #{productUnitPrice}
			, #{productCount}
			, #{productCategoryCd}
			, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI')
		)
		]]>
	</insert>

	<select id="retrieveStatisticsForStock" resultType="map">
		/*	retrieveStatisticsForStock	*/
		SELECT PRODUCT_NAME, PRODUCT_COUNT
		FROM   TB_PRODUCT
		WHERE  1=1
		AND    PRODUCT_CATEGORY_CD = #{productCategoryCd}
		GROUP BY PRODUCT_NAME, PRODUCT_COUNT
	</select>

	<select id="retrieveStatisticsForSell" resultType="map">
		/*	retrieveStatisticsForSell	*/
		SELECT PRODUCT.PRODUCT_NAME, SELL_COUNT
		FROM   TB_SELL SELL
			   INNER JOIN TB_PRODUCT PRODUCT ON PRODUCT.PRODUCT_CODE = SELL.PRODUCT_CODE
		GROUP BY PRODUCT.PRODUCT_NAME, SELL_COUNT
	</select>


</mapper>